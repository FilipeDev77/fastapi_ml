name: DevSecOps CI/CD for FastAPI ML App

on:
  push:
    branches:
      - main

env:
  AZURE_WEBAPP_NAME: fastapi-ml-app
  AZURE_CONTAINER_REGISTRY: filipeacr.azurecr.io
  IMAGE_NAME: ml-api

jobs:
  build-test-scan-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout du code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configurer Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # 3Ô∏è‚É£ Installer d√©pendances et outils
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt
          pip install pytest semgrep pip-audit

      # 4Ô∏è‚É£ Tests unitaires du code
      - name: Run unit tests
        run: |
          mkdir -p test-reports
          cd $GITHUB_WORKSPACE
          pytest test_app.py --junitxml=test-reports/test_results.xml
        continue-on-error: true

      # 5Ô∏è‚É£ Tests unitaires du mod√®le ML
      - name: Run ML model tests
        run: |
          mkdir -p test-reports
          cd $GITHUB_WORKSPACE
          pytest test_model.py --junitxml=test-reports/ml_test_results.xml
        continue-on-error: true

      # 6Ô∏è‚É£ Scan de s√©curit√© du code avec Semgrep
      - name: Security scan with Semgrep
        run: |
          mkdir -p test-reports
          cd $GITHUB_WORKSPACE
          semgrep --config=p/ci --json > test-reports/semgrep_report.json
        continue-on-error: true

      # 7Ô∏è‚É£ Audit des d√©pendances Python
      - name: Audit Python dependencies
        run: |
          mkdir -p test-reports
          cd $GITHUB_WORKSPACE
          pip-audit --format json > test-reports/pip_audit_report.json
        continue-on-error: true

      # 8Ô∏è‚É£ Connexion √† Azure Container Registry
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v2
        with:
          login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # 9Ô∏è‚É£ Build de l'image Docker
      - name: Build Docker image
        run: |
          cd $GITHUB_WORKSPACE
          docker build . -t ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      # üîü Scan de l'image Docker avec Trivy
      - name: Scan Docker image for vulnerabilities with Trivy
        run: |
          mkdir -p test-reports
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD/test-reports:/test-reports \
            aquasec/trivy:latest image \
            --format json --output /test-reports/trivy_report.json \
            ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        continue-on-error: true

      # 1Ô∏è‚É£1Ô∏è‚É£ Upload des artefacts des tests et scans
      - name: Upload test and scan reports
        uses: actions/upload-artifact@v4
        with:
          name: security-test-reports
          path: test-reports/

      # 1Ô∏è‚É£2Ô∏è‚É£ D√©ploiement sur Azure Web App uniquement si tout r√©ussit
      - name: Deploy to Azure Web App
        if: success()
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
