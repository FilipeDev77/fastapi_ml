name: DevSecOps CI/CD for FastAPI ML App

on:
  push:
    branches:
      - main

env:
  AZURE_WEBAPP_NAME: fastapi-ml-app
  AZURE_CONTAINER_REGISTRY: filipeacr.azurecr.io
  IMAGE_NAME: ml-api

jobs:
  build-test-scan-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️ Checkout du code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️ Configurer Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # 3️ Installer les dépendances et outils de test / audit
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt
          pip install pytest semgrep pip-audit

      # 4️ Exécuter les tests unitaires et enregistrer les logs
      - name: Run unit tests
        run: |
          mkdir -p test-reports
          pytest test_app.py --junitxml=test-reports/test_results.xml
        continue-on-error: true

      # 5️ Scan de sécurité du code avec Semgrep et sauvegarde des logs
      - name: Security scan with Semgrep
        run: |
          mkdir -p test-reports
          semgrep --config=p/ci --json > test-reports/semgrep_report.json
        continue-on-error: true

      # 6️ Audit des dépendances Python et sauvegarde des logs
      - name: Audit Python dependencies
        run: |
          mkdir -p test-reports
          pip-audit --format json > test-reports/pip_audit_report.json
        continue-on-error: true

      # 7️ Connexion à Azure Container Registry
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v2
        with:
          login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # 8️ Build de l’image Docker
      - name: Build Docker image
        run: |
          docker build . -t ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      # 9️ Scan de l’image Docker avec Trivy et sauvegarde des logs
      - name: Scan Docker image for vulnerabilities
        uses: aquasec/trivy-action@master
        with:
          image-ref: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: json
          output: test-reports/trivy_report.json
        continue-on-error: true

      # 10 Publier les artefacts des tests et scans
      - name: Upload test and scan reports
        uses: actions/upload-artifact@v3
        with:
          name: security-test-reports
          path: test-reports/

      # 1️1️ Déploiement sur Azure Web App seulement si tous les tests passent
      - name: Deploy to Azure Web App
        if: success()
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
 